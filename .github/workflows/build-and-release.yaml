name: Build, Test and Release

on:
  push:
    branches:
      - main
    tags:
      - "v*.*.*"
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  build:
    name: build-and-test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [
          "samples/echo",
        ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
          driver: docker-container

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: current

      - name: Install Cartesi CLI
        run: npm install -g @cartesi/cli@2.0.0-alpha.8

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Check system requirements
        run: cartesi doctor

      - name: Build ${{ matrix.project }} initial snapshot
        run: cartesi build
        working-directory: ${{ matrix.project }}

      - name: Get project name
        if: startsWith(github.ref, 'refs/tags/')
        id: project_name
        run: echo "name=$(basename ${{ matrix.project }})" >> $GITHUB_OUTPUT

      - name: Create artifact archive for snapshot
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          tar -czf ${{ steps.project_name.outputs.name }}-snapshot.tar.gz -C ${{ matrix.project }}/.cartesi/image .
          sha256sum ${{ steps.project_name.outputs.name }}-snapshot.tar.gz > ${{ steps.project_name.outputs.name }}-snapshot.tar.gz.sha256

      - name: Upload build artifacts
        if: startsWith(github.ref, 'refs/tags/')
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.project_name.outputs.name }}-snapshot
          path: |
            *-snapshot.tar.gz
            *-snapshot.tar.gz.sha256
          retention-days: 30
          if-no-files-found: warn

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release-assets
          find artifacts -name "*.tar.gz" -exec cp {} release-assets/ \;
          find artifacts -name "*.sha256" -exec cp {} release-assets/ \;

          echo "Decompressing snapshot for verification..."
          mkdir -p snapshot_content
          TARBALL=$(find artifacts -name "*.tar.gz")
          tar -xzf $TARBALL -C snapshot_content
          echo "Decompressed content:"
          ls -lR snapshot_content

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          prerelease: ${{ contains(github.ref, '-rc') }}
          files: release-assets/*
          fail_on_unmatched_files: true